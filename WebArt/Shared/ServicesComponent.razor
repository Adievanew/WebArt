@using WebArt.Shared
@using BootstrapBlazor.Components
@using System.Collections.ObjectModel
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject BootstrapBlazor.Components.ToastService ToastService
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Http
@using AntDesign;

<div
    class="d-flex flex-column center-div">
<NavLink href=@GetHref() >
    <AntDesign.Card Title="@service.Name" Hoverable Style="width:500px; auto; margin:20px; ">
       @* <Extra>
            <h5 class="card-header"></h5>
        </Extra>*@
        <Body >
           <div>
                <p class="card-title">@service.Description</p>
                <p class="card-body">@service.Cost р</p>
            </div>
            
           
             

    @if (resp.Count == 0)
    {
        <BootstrapBlazor.Components.Button IsAsync="true" OnClick="@Otklik" class="product-cart-btn">Отклинуться</BootstrapBlazor.Components.Button>
    }
    else
    {
        <BootstrapBlazor.Components.Button IsDisabled="true" class="product-cart-btn">Откликнуться</BootstrapBlazor.Components.Button>
    }

     
        </Body>
        <ChildContent >
            <CardMeta AvatarTemplate="@avatarTemplate" Title="@service.User?.Name" Description="@srcDate" />
        </ChildContent>
  
   
   
</AntDesign.Card>
</NavLink>
</div>
@code {
    RenderFragment avatarTemplate = @<AntDesign.Avatar src="srcAva"></AntDesign.Avatar>;

    public List<ResponceSer> resp { get; set; } = new List<ResponceSer>();
   
    public ResponceSer responce = new ResponceSer();
    [Parameter]
    public int Id { get; set; }
    [CascadingParameter(Name = "Token")]
    public string Token { get; set; }
    public User CurrentUser { get; set; } = new User();
    [CascadingParameter(Name = "IsAuthorized")]
    public bool IsAuthorized { get; set; }
    public string srcAva;
    public string srcDate;
    public Service service = new Service();
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    protected override async Task OnParametersSetAsync()
    {
        //int stock = await Ad.GetProductStock(Id);
        //IsAvailable = stock > 0;
        service = (await BaseHttpServices<Service>.SendListAsync<Service >("Services/" + Id, HttpMethod.Get)).FirstOrDefault();
    }
    private async Task Otklik()
    {
        responce.SerId = service.Id;
        //responce.Ads = ad;
        responce.UserId = CurrentUser.Id;
        responce = (await BaseHttpServices<ResponceSer>.SendListAsync<ResponceSer>("ResponcesAd/", HttpMethod.Post, responce)).FirstOrDefault();
        ErrorMessage("Отклик доставлен");
        GetResponse();
    }
    private string GetHref()
    {
        return "sercard/" + service.Id;
    }
    private string GetHrefuser()
    {
        return "userprofile/" + service.Id;
    }
    protected override async Task OnInitializedAsync()
    {
        if (!IsAuthorized) NavigationManager.NavigateTo("/auth");
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    var tokenClaim = user.FindFirst("Token");
                    if (tokenClaim != null)
                    {
                        User? temp_user = await ArtLib.Auth.GetUserByToken(tokenClaim.Value);
                        if (temp_user == null) NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                        else CurrentUser = temp_user;

                        service = (await BaseHttpServices<Service>.SendListAsync<Service>("Services/" + Id, HttpMethod.Get)).FirstOrDefault();
                        GetResponse();
                        srcAva = service.User?.FullImageLink;
                        srcDate = Convert.ToString(service.Date);
                    }
                    else NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                }
            }
        }
    }
    private async Task GetResponse()
    {
        resp = new List<ResponceSer>(await BaseHttpServices<ResponceSer>.SendListAsync<ResponceSer>("ResponcesSer/user?userId=" + CurrentUser.Id + "&adId=" + service.Id, HttpMethod.Get));
        InvokeAsync(StateHasChanged);
    }
    public bool IsAvailable { get; set; } = false;
    private void OnInfoClick(string title, string content = "")
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Success,

                // Notification box Title value
                Title = title,

                // Notification body content
                Content = content
            });
    }
    private void ErrorMessage(string ex)
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Success,

                // Notification box Title value
                Title = "Уведомление",

                // Notification body content
                Content = ex
            });
    }
}

