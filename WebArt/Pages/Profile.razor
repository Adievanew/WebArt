
@page "/profile"
@using System.Web;
@using ArtLib;
@using Microsoft.AspNetCore.Http
@inject IHttpContextAccessor httpContextAccessor
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@using BootstrapBlazor.Components
@inject IJSRuntime JS;

<PageTitle>Профиль</PageTitle>
<div class="container mt-5">

    <div class="row d-flex justify-content-center">

        <div class="col-md-7">

            <div class="card p-3 py-4">

                <div class="text-center">
                    <img bind-value="@CurrentUser.Avatar" width="100" class="rounded-circle">
                </div>


                <div class="text-center mt-3">
                    <span class="bg-secondary p-1 px-4 rounded text-white">Pro</span>
                    <div class="mt-2 mb-0">@CurrentUser.Name</div>
                    <span>@CurrentUser.City</span>

                    <div class="px-4 mt-1">
                        <p class="fonts">@CurrentUser.Description</p>

                    </div>

                 


                </div>




            </div>

        </div>

    </div>

</div>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    [CascadingParameter(Name = "Token")]
    public string Token { get; set; }

    [CascadingParameter(Name = "IsAuthorized")]
    public bool IsAuthorized { get; set; }

    private static string PhoneFormatter(string source) => String.Format("{0:(###) ###-####}", source);
    public User CurrentUser { get; set; } = new User();

    public List<Image> Images { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (!IsAuthorized) NavigationManager.NavigateTo("/auth");
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    var tokenClaim = user.FindFirst("Token");
                    if (tokenClaim != null)
                    {
                        User? temp_user = await ArtLib.Auth.GetUserByToken(tokenClaim.Value);
                        if (temp_user == null) NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                        else CurrentUser = temp_user;
                    }
                    else NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                }
            }
        }
    }

    private async Task SaveChanges()
    {

    }

    private async Task Logout()
    {
        NavigationManag.NavigateTo($"/logout?returnUrl=/", true);
    }

    private Task OnChanged(CollapseItem item)
    {
        return Task.CompletedTask;
    }
}

