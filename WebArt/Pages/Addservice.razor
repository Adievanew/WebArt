@page "/addservice"
@using System.Web;
@using Microsoft.AspNetCore.Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using BootstrapBlazor.Components
@using Microsoft.AspNetCore.Components.Web
@inject BootstrapBlazor.Components.ToastService ToastService
<div class="card">
    @*<h5 class="card-header"> @ad.Name  </h5>*@
    <BootstrapInput @bind-Value="@service.Name" PlaceHolder="Наименование услуги" IsTrim="true" ShowLabel="true" DisplayText="Наименование услуги" />

    <div class="card-body">
        @*<h5 class="card-title">@ad.Date</h5>*@
        @*<p class="card-title">@ad.Description </p>*@
        <BootstrapInput @bind-Value="@service.Description" PlaceHolder="Описание" IsTrim="true" ShowLabel="true" DisplayText="Описание" />
        <BootstrapInput @bind-Value="@service.Cost" PlaceHolder="Стоимость" IsTrim="true" ShowLabel="true" DisplayText="Стоимость" />

        @* <a href="#" class="btn btn-primary">Go somewhere</a>*@
    </div>
    <BootstrapBlazor.Components.Button OnClick=@SaveChanges>Опубликовать</BootstrapBlazor.Components.Button>

</div>


@code {
    public User CurrentUser { get; set; } = new User();
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }

    public Service service { get; set; } = new Service();
    [Parameter]
    public int Id { get; set; }
    // public DateTime date  = new DateTime();

    [CascadingParameter(Name = "Token")]
    public string Token { get; set; }

    [CascadingParameter(Name = "IsAuthorized")]
    public bool IsAuthorized { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (!IsAuthorized) NavigationManager.NavigateTo("/auth", true);
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    var tokenClaim = user.FindFirst("Token");
                    if (tokenClaim != null)
                    {
                        User? temp_user = await ArtLib.Auth.GetUserByToken(tokenClaim.Value);
                        if (temp_user == null) NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                        else CurrentUser = temp_user;
                    }
                    else NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                }
            }
        }
    }

    private async Task SaveChanges()
    {
        service.Date  = DateTime.Now;
        service.UserId = CurrentUser.Id;
        //int stock = await Ad.GetProductStock(Id);
        //IsAvailable = stock > 0;
        service = (await BaseHttpServices<Service>.SendListAsync<Service>("Services/", HttpMethod.Post, service)).FirstOrDefault();
        ErrorMessage("Привет");
    }
    private async Task Otklik()
    { }
    public bool IsAvailable { get; set; } = false;

    private void OnInfoClick(string title, string content = " ")
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Success,

                // Notification box Title value
                Title = title,

                // Notification body content
                Content = content
            });
    }
    private void ErrorMessage(string ex)
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Error,

                // Notification box Title value
                Title = "Ошибка",

                // Notification body content
                Content = ex
            });
    }
}
