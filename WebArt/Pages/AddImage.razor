@page "/addimage"
@using System.Web;
@using Microsoft.AspNetCore.Http
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime
@using BootstrapBlazor.Components
@using Microsoft.AspNetCore.Components.Web

@using AntDesign;

@using WebArt.Models;
@using ArtLib;
@inject IJSRuntime JSRuntime


@implements IDisposable
@inject IMessageService _message
@inject BootstrapBlazor.Components.ToastService ToastService


<div class="card">



    <div class="card-body" >
        <div class="containerka">
        <div class="col-2-3">
                <div class="row d-flex justify-content-center">
             <img src="@AddedImage.FullImageLink" alt="" width="300" height="300" />
                <InputFile OnChange="HandleFileUpload" />
             </div>
               </div>
        <div class="col-1-3">
        <BootstrapInput @bind-Value="@AddedImage.Name" PlaceHolder="Наименование изображения" IsTrim="true" ShowLabel="true" DisplayText="Наименование изображения" />

        <BootstrapInput @bind-Value="@AddedImage.Description" PlaceHolder="Описание изображения" IsTrim="true" ShowLabel="true" DisplayText="Описание изображения" />
         <div class="row d-flex justify-content-center">

        <AntDesign.Select TItem="JobCategory"
        Placeholder="Выберите категорию"
                                    
                                      TItemValue="int?"
                          DataSource="@categories"
                          @bind-Value="@AddedImage.CategoryId"
                          ValueName="@nameof(JobCategory.Id)"
                          LabelName="@nameof(JobCategory.Name)"
                          Style="width:300px"
                          OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </AntDesign.Select>

        <AntDesign.Select TItem="Style"
                                  Placeholder="Выберите стиль"
                          TItemValue="int?"
                          DataSource="@style"
                          @bind-Value="@AddedImage.StyleId"
                          ValueName="@nameof(JobCategory.Id)"
                          LabelName="@nameof(JobCategory.Name)"
                          Style="width:200px"
                          OnSelectedItemChanged="OnSelectedItemChangedHandler">
        </AntDesign.Select>
       @*
        <asp:FileUpload ID="FileUploadControl" runat="server" />
        <asp:Button ID="UploadButton" runat="server" Text="Upload File" OnClick="UploadButton_Click" />*@

        <BootstrapBlazor.Components.Button OnClick=@SaveChanges>Опубликовать</BootstrapBlazor.Components.Button>
        </div>
            </div>
    </div>


</div>

</div>


@code {
    //public string Size { get; set; } = AntSizeLDSType.Small;
    public User CurrentUser { get; set; } = new User();
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationState { get; set; }
    public List<ArtLib.JobCategory> categories = new List<ArtLib.JobCategory>();
    public List<ArtLib.Style> style = new List<ArtLib.Style>();
    public ArtLib.Image AddedImage { get; set; } = new ArtLib.Image();
    [Parameter]
    public int Id { get; set; }
    // public DateTime date  = new DateTime();
    private CancellationTokenSource? ReadAvatarToken { get; set; }
    [CascadingParameter(Name = "Token")]
    public string Token { get; set; }

    [CascadingParameter(Name = "IsAuthorized")]
    public bool IsAuthorized { get; set; }
    protected override async Task OnInitializedAsync()
    {
        if (!IsAuthorized) NavigationManager.NavigateTo("/auth", true);
        if (authenticationState is not null)
        {
            var authState = await authenticationState;
            var user = authState?.User;

            if (user is not null)
            {
                if (user.Identity is not null && user.Identity.IsAuthenticated)
                {
                    var tokenClaim = user.FindFirst("Token");
                    if (tokenClaim != null)
                    {
                        User? temp_user = await ArtLib.Auth.GetUserByToken(tokenClaim.Value);
                        if (temp_user == null) NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                        else CurrentUser = temp_user;
                        categories = await BaseHttpServices<JobCategory>.SendListAsync<ArtLib.JobCategory>("JobCategories/", HttpMethod.Get);
                        style = await BaseHttpServices<Style>.SendListAsync<ArtLib.Style>("Styles/", HttpMethod.Get);

                    }
                    else NavigationManager.NavigateTo("/logout?returnUrl=/", true);
                }
            }
        }
    }


    private async void HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {

            var image = e.File;
            if (image != null && image.Size > 0 && image.Size < 512000)
            {
                MemoryStream ms = new MemoryStream();
                await e.File.OpenReadStream().CopyToAsync(ms);
                var bytes = ms.ToArray();

                using (var client = new HttpClient())
                {
                    var content = new MultipartFormDataContent();
                    var fileContent = new ByteArrayContent(bytes);
                    fileContent.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("image/jpeg");
                    content.Add(fileContent, "file", image.Name);

                    var response = await WebArt.Models.Global.ClientNet.PostAsync("ImagesLink", content);

                    var result = await response.Content.ReadAsStringAsync();
                    if (response.IsSuccessStatusCode)
                    {
                        var parsedResult = Newtonsoft.Json.Linq.JObject.Parse(result);
                        var uploadedFileName = parsedResult["fileName"].ToString();
                        AddedImage.ImageLink = uploadedFileName.Replace("\\", "%5C%5C");
                        InvokeAsync(StateHasChanged);
                    }
                }
            }
        }
        catch (Exception ex)
        {

        }
    }
    public void Dispose()
    {
        //ReadAvatarToken?.Cancel();
        //GC.SuppressFinalize(this);
    }
    private async Task SaveChanges()
    {
        try
        {
            AddedImage.UserId = CurrentUser.Id;
            //int stock = await Ad.GetProductStock(Id);
            //IsAvailable = stock > 0;
            AddedImage = (await BaseHttpServices<ArtLib.Image>.SendListAsync<ArtLib.Image>("Images/", HttpMethod.Post, AddedImage)).FirstOrDefault();
            OnInfoClick("Изображение опубликовано");
        }
        catch (Exception ex)
        {

        }
    }
    private async Task Otklik()
    { }
    public bool IsAvailable { get; set; } = false;

    private void OnInfoClick(string title, string content = " ")
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Success,

                // Notification box Title value
                Title = title,

                // Notification body content
                Content = content
            });
    }
    private void ErrorMessage(string ex)
    {
        ToastService.Show(new BootstrapBlazor.Components.ToastOption()
            {
                // Notification category
                Category = BootstrapBlazor.Components.ToastCategory.Error,

                // Notification box Title value
                Title = "Ошибка",

                // Notification body content
                Content = ex
            });
    }

    private void OnSelectedItemChangedHandler(JobCategory value)
    {
        //Console.WriteLine($"selected: ${value?.Name}");
    }
    private void OnSelectedItemChangedHandler(Style value)
    {
        //Console.WriteLine($"selected: ${value?.Name}");
    }

}
